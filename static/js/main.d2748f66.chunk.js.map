{"version":3,"sources":["components/Circle/Circle.js","components/Circle/index.js","components/Gifts/Gift1.svg","components/GiftGitInfo/GiftGitInfo.js","components/Tree/tree.svg","components/App/App.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["Circle","props","color","position","style","backgroundColor","className","GiftGitInfo","App","useState","id","setId","coordX","setX","coordY","setY","circles","setCircles","onClick","src","tree","alt","e","pageX","pageY","console","log","length","push","map","top","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAgBeA,ICdAA,EDAf,SAAgBC,GAAQ,IACdC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACPC,EAAK,aACPC,gBAAiBH,GACdC,GAIP,OACI,qBAAKG,UAAU,SAASF,MAAOA,KEXxB,ICwCAG,ICxCA,MAA0B,iCCiE1BC,IC/DAA,EDMf,WAAgB,IAAD,EACKC,mBAAS,IADd,mBACRC,EADQ,KACJC,EADI,OAEUF,mBAAS,IAFnB,mBAENG,EAFM,KAEEC,EAFF,OAGUJ,mBAAS,IAHnB,mBAGNK,EAHM,KAGEC,EAHF,OAIiBN,mBAAS,IAJ1B,mBAINO,EAJM,KAIGC,EAJH,KAuBb,OACE,sBAAKX,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,mBAAGA,UAAU,cAAb,2PAEA,wBAAQY,QAtBd,WACED,EAAW,CAAC,CAAEL,SAAQE,SAAQJ,SAqB1B,8IAIA,qBAAKJ,UAAU,OAAf,SACE,qBAAKa,IAAKC,EAAMC,IAAI,WAAWf,UAAU,WAAWY,QAhB5D,SAAkBI,GAChBT,EAAKS,EAAEC,OACPR,EAAKO,EAAEE,OACPC,QAAQC,IAAId,WAiBV,wBAAQM,QA3BZ,WACEP,EAAOK,EAAQW,QACfX,EAAQY,KAAK,CAAEhB,SAAQE,SAAQJ,OAC/Be,QAAQC,IAAIV,EAAQW,QACpBF,QAAQC,IAAIhB,IAuBV,2EAIA,8BACEM,EAAQa,KAAI,YAA6B,IAA1BjB,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,OAAQJ,EAAS,EAATA,GAC7B,OAAO,cAAC,EAAD,CAELR,MAAO,MACPC,SAAU,CAAE2B,IAAKhB,EAAQiB,KAAMnB,IAF1BF,YExCFsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d2748f66.chunk.js","sourcesContent":["import  './Circle.css';\r\n\r\nfunction Circle(props) {\r\n    let { color, position } = props;\r\n    const style = {\r\n        backgroundColor: color,\r\n        ...position\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"circle\" style={style}>       \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Circle;","import Circle from './Circle';\r\n\r\nexport default Circle;","export default __webpack_public_path__ + \"static/media/Gift1.4de2d7fc.svg\";","import { useState } from 'react';\r\nimport Gift1 from '../Gifts/Gift1.svg';\r\nimport '../Gifts/Gift.css';\r\n\r\n\r\nfunction GiftGitInfo() {\r\n    let [name, setName] = useState('');\r\n    let [avatar, setAvatar] = useState('');\r\n    let [days, setDays] = useState('');\r\n\r\n    function giveData() {\r\n        let user = prompt('Введите ваше имя на github', \"username\");\r\n        fetch(`https://api.github.com/users/${user}`)\r\n            .then(response => response.json())\r\n            .then(githubUserData => new Promise((resolve, reject) => {\r\n\r\n                setName(githubUserData.login);\r\n                setAvatar(githubUserData.avatar_url);\r\n\r\n                let currentDate = new Date();\r\n                let formatDate = new Date(Date.parse(githubUserData.created_at));\r\n                const calc = ((currentDate - formatDate) / 1000 / 60 / 60 / 24);\r\n                setDays(calc.toFixed(0));\r\n            }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"GiftGitInfo\">\r\n            <button onClick={giveData}>\r\n                Получить подарочную информацию!\r\n            </button>\r\n            <div>\r\n                <p> Имя: {name} </p>\r\n                <p> Вы на github уже {days} дня! Это точно повод для праздника!</p>\r\n                <img src={avatar} alt={name} className='avatar'></img></div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GiftGitInfo;\r\n","export default __webpack_public_path__ + \"static/media/tree.ab871074.svg\";","import { useState } from 'react';\r\nimport './App.css';\r\nimport '../Gifts/Gift.css';\r\n\r\nimport Circle from '../Circle';\r\nimport GiftGitInfo from '../GiftGitInfo/GiftGitInfo';\r\nimport tree from '../Tree/tree.svg';\r\n\r\nfunction App() {\r\n  let [id, setId] = useState('');\r\n  const [coordX, setX] = useState('');\r\n  const [coordY, setY] = useState('');\r\n  const [circles, setCircles] = useState([]);\r\n\r\n  function boxCircle() {\r\n    setCircles([{ coordX, coordY, id }]);\r\n  }\r\n\r\n  function addCircle() {\r\n    setId((circles.length));\r\n    circles.push({ coordX, coordY, id });\r\n    console.log(circles.length);\r\n    console.log(id)\r\n  }\r\n\r\n  function moveBall(e) {\r\n    setX(e.pageX);\r\n    setY(e.pageY);\r\n    console.log(coordX);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"wrap\">\r\n        <p className='description'>Вы можете нарядить ёлку, просто кликнув по ней!</p>\r\n\r\n        <button onClick={boxCircle}>\r\n          Набрать корзину шариков\r\n        </button>\r\n\r\n        <div className=\"Tree\">\r\n          <img src={tree} alt=\"XMastree\" className=\"XMasTree\" onClick={moveBall}></img>\r\n        </div>\r\n\r\n      </div>\r\n      <button onClick={addCircle}>\r\n        Новый шарик\r\n      </button>\r\n\r\n      <div>{\r\n        circles.map(({ coordX, coordY, id }) => {\r\n          return <Circle\r\n            key={id}\r\n            color={'red'}\r\n            position={{ top: coordY, left: coordX }}\r\n          />\r\n        })\r\n      }</div>\r\n      {/*  <button onClick={GiftGitInfo}>\r\n        Получить подарок\r\n      </button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}